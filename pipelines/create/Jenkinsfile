currentBuild.displayName = "#${BUILD_NUMBER}"
currentBuild.description = "Create ${ENV_NAME} (${ENV_TYPE})"

pipeline {
    agent {
        label 'provisioner'
    }
    options {
        timestamps()
    }
    parameters {
        choice(
            name: 'ENV_TYPE', 
            choices: ['dev', 'uat'], 
            description: 'Choose environment type.'
        )
        string(
            name: "ENV_NAME",
            description: "Unique name for the environment instance you want to create. It'll be used to create unique resources and could be used as part of DNS entries."
        )
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('jenkins-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-secret-key')
        AWS_DEFAULT_REGION = 'us-west-2'
        PARAMETER_STORE_NAMESPACE = credentials('parameter-store-ns')
    }
    stages {
        stage('Create environment configuration') {
            input {
                message "Please, configure the environment"
                ok "Send"
                parameters {
                    string(name: "OWNER", description: "Person who owns the resource. Must be full name and email following format 'Name Surname - me@domain.com'.")
                    choice(name: "TEAM", choices: ['armed', 'pzl', 'spartans', 'strawhats'], description: "Team in charge of the environment.")
                    string(name: "FILENAME", description: "New file to create inside the instance as part of the ansible playbook.")
                }
            }
            steps {
                sh "pipelines/create/create_tfvars.sh > ${ENV_NAME}.tfvars"
                sh "pipelines/create/create_ansible_yaml.sh > ${ENV_NAME}.yaml"
                sh "cat ${ENV_NAME}.tfvars"
                sh "cat ${ENV_NAME}.yaml"
            }
        }
        stage('Store environment configuration') {
            steps {
                sh """aws ssm put-parameter \
--name \"${PARAMETER_STORE_NAMESPACE}/${ENV_TYPE}/${ENV_NAME}.tfvars\" \
--description \"Terraform tfvars for the ${ENV_NAME} environment on ${ENV_TYPE}\" \
--value file://${ENV_NAME}.tfvars \
--type String --overwrite
"""
                sh """aws ssm put-parameter \
--name \"${PARAMETER_STORE_NAMESPACE}/${ENV_TYPE}/${ENV_NAME}.ansible.yml\" \
--description \"Ansible config for the ${ENV_NAME} environment on ${ENV_TYPE}\" \
--value file://${ENV_NAME}.yaml \
--type String --overwrite
"""
            }
        }
        stage('Invoke update pipeline') {
            steps {
                build job: 'Update environment', parameters: [
                    [$class: 'StringParameterValue', name: 'ENV_TYPE', value: ENV_TYPE],
                    [$class: 'StringParameterValue', name: 'ENV_NAME', value: ENV_NAME],
                    [$class: 'BooleanParameterValue', name: 'WAIT_APPROVAL', value: false]
                ]
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
