currentBuild.displayName = "#${BUILD_NUMBER}"
currentBuild.description = "Destroy ${ENV_NAME} (${ENVIRONMENT})"

pipeline {
    agent {
        label 'provisioner'
    }
    options {
        timestamps()
    }
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'uat'],
            description: 'Choose environment'
        )
        string(
            name: "ENV_NAME",
            description: "Unique name for the environment you want to create. It'll be used to create unique resources and could be used as part of DNS entries."
        )
        booleanParam(
            name: "REMOVE_CONFIGURATION",
            defaultValue: true,
            description: "This option will remove all the configuration files stored in parameter store."
        )
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('jenkins-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-secret-key')
        AWS_DEFAULT_REGION = 'us-west-2'
        PARAMETER_STORE_NAMESPACE = credentials('parameter-store-ns')
    }
    stages {
        stage('Configure terraform') {
            steps {
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}.tfvars\" --output json | jq .Parameter.Value -r > ${ENVIRONMENT}.tfvars
                """
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}.backend.tf\" --output json | jq .Parameter.Value -r > backend.tf
                """
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}/${ENV_NAME}.tfvars\" --output json | jq .Parameter.Value -r > project.tfvars
                """
            }
        }
        stage('Terraform plan destroy') {
            steps {
                sh 'terraform init'
                sh """terraform plan --destroy -var-file=\"${ENVIRONMENT}.tfvars\" -var-file=\"project.tfvars\" -out myplan"""
                script {
                    def userInput = input(
                        id: 'confirm', 
                        message: 'Do you want to apply these changes and destroy the environment?'
                    )
                }
            }
        }
        stage('Terraform destroy') {
            steps {
                sh 'terraform apply -input=false myplan'
            }
        }
        stage('Clean up configuration') {
            when {
                expression { return params.REMOVE_CONFIGURATION }
            }
            steps {
                sh 'aws ssm delete-parameter --name "${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}/${ENV_NAME}.tfvars"'
                sh 'aws ssm delete-parameter --name "${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}/${ENV_NAME}.ansible.yml"'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
