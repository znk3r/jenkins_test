currentBuild.displayName = "#${BUILD_NUMBER}"
currentBuild.description = "Destroy ${ENV_NAME} (${ENVIRONMENT})"

pipeline {
    agent {
        label 'provisioner'
    }
    options {
        timestamps()
    }
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'uat'],
            description: 'Choose environment'
        )
        string(
            name: "ENV_NAME",
            description: "Unique name for the environment you want to create. It'll be used to create unique resources and could be used as part of DNS entries."
        )
        string(
            name: "PARAMETER_STORE_NAMESPACE",
            description: "Base SSM parameter store namespace where configurations are stored."
        )
        booleanParam(
            name: "REMOVE_CONFIGURATION",
            defaultValue: true,
            description: "This option will remove all the configuration files stored in parameter store."
        )
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('jenkins-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-secret-key')
        AWS_DEFAULT_REGION = 'us-west-2'
    }
    stages {
        stage('Retrieve code') {
            steps {
                git 'https://github.com/znk3r/jenkins_test'
            }
        }
        stage('Configure terraform') {
            steps {
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}.tfvars\" --output json | jq .Parameter.Value -r > ${ENVIRONMENT}.tfvars
                """
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}.backend.tf\" --output json | jq .Parameter.Value -r > backend.tf
                """
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}/${ENV_NAME}.tfvars\" --output json | jq .Parameter.Value -r > project.tfvars
                """
            }
        }
        stage('Terraform plan destroy') {
            steps {
                sh 'terraform init -no-color'
                sh """terraform plan --destroy -no-color -var-file=\"${ENVIRONMENT}.tfvars\" -var-file=\"project.tfvars\" -out myplan"""
            }
        }
        stage('Terraform approval') {
            steps {
                script {
                    def userInput = input(
                        id: 'confirm', 
                        message: 'Do you want to apply these changes and destroy the environment?', 
                        parameters: [
                            [
                                $class: 'BooleanParameterDefinition', 
                                defaultValue: true, 
                                description: 'Apply terraform', 
                                name: 'confirm'
                            ] 
                        ]
                    )
                }
            }
        }
        stage('Terraform destroy') {
            steps {
                sh 'terraform apply -no-color -input=false myplan'
            }
        }
        stage('Clean up configuration') {
            steps {
                sh 'aws ssm delete-parameter --name "${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}/${ENV_NAME}.tfvars"'
                sh 'aws ssm delete-parameter --name "${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}/${ENV_NAME}.ansible.yml"'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
