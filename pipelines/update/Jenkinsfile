currentBuild.displayName = "#${BUILD_NUMBER}"
currentBuild.description = "Update ${ENV_NAME} (${ENVIRONMENT})"

pipeline {
    agent {
        label 'provisioner'
    }
    options {
        timestamps()
    }
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'uat'],
            description: 'Choose environment'
        )
        string(
            name: "ENV_NAME",
            description: "Unique name for the environment you want to create. It'll be used to create unique resources and could be used as part of DNS entries."
        )
        string(
            name: "PARAMETER_STORE_NAMESPACE",
            description: "Base SSM parameter store namespace where configurations are stored."
        )
        booleanParam(
            name: "WAIT_APPROVAL",
            defaultValue: true,
            description: "Wait for approval?"
        )
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('jenkins-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-secret-key')
        AWS_DEFAULT_REGION = 'us-west-2'
    }
    stages {
        stage('Configure terraform') {
            steps {
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}.tfvars\" --output json | jq .Parameter.Value -r > ${ENVIRONMENT}.tfvars
                """
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}.backend.tf\" --output json | jq .Parameter.Value -r > backend.tf
                """
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}/${ENV_NAME}.tfvars\" --output json | jq .Parameter.Value -r > project.tfvars
                """
            }
        }
        stage('Terraform plan') {
            steps {
                sh 'terraform init'
                sh "terraform plan -var-file=\"${ENVIRONMENT}.tfvars\" -var-file=\"project.tfvars\" -out myplan"
            }
        }
        stage('Approval') {
            when {
                expression { return params.WAIT_APPROVAL }
            }
            steps {
                script {
                    def userInput = input(
                        id: 'confirm', 
                        message: 'Do you want to apply these changes?'
                    )
                }
            }
        }
        stage('Terraform apply') {
            steps {
                sh 'terraform apply -input=false myplan'
            }
        }
        stage('Configure ansible') {
            steps {
                sh """set +e;
aws ssm get-parameter --name \"${PARAMETER_STORE_NAMESPACE}/${ENVIRONMENT}/${ENV_NAME}.ansible.yml\" --output json | jq .Parameter.Value -r > ansible/vars.yml
                """
            }
        }
        stage('Wait until instance is up') {
            steps {
                script {
                    instance_id = sh(script: 'terraform output instance_id', returnStdout: true).trim()
                    timeout(time: 10, unit: 'MINUTES') {
                        waitUntil {
                            try {
                                return sh(
                                    script: "aws ec2 describe-instance-status --instace-ids ${instance_id} | jq \".InstanceStatuses[0].InstanceStatus.Status\" -r", 
                                    returnStdout: true
                                ).trim() == 'ok'
                            } catch (exception) {
                                return false
                            }
                        }
                    }
                }
            }
        }
        stage('Run ansible') {
            environment {
                ANSIBLE_HOST_KEY_CHECKING = false
            }
            steps {
                ansiblePlaybook(
                    credentialsId: 'jenkins-test-private-key',
                    inventory: 'ansible/inventory.yml', 
                    playbook: 'ansible/playbook.yml',
                    hostKeyChecking: false,
                    colorized: true
                )
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
